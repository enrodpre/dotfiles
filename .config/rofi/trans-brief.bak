#!/usr/bin/env zsh

touch "$transHistory"

word="$1"
transText_org="$@"
# Trimming
transText=$(echo "$@" | trim)

if [ "$verbose" = true ]; then
    echo ok >>/dev/stderr
    echo "$transText" >>/dev/stderr
    echo "retv = $ROFI_RETV" >>/dev/stderr
    echo "info = $ROFI_INFO" >>/dev/stderr
    echo "data = $ROFI_DATA" >>/dev/stderr
fi

function refresh {
    pkill -u "$USER" rofi
    translate
}

function make_translation {
    if [ "$verbose" = true ]; then set -x; fi

    if [ "$speak" = true ]; then
        speak_args="-speak"

        if [ "$save_audio" = true ]; then
            [[ ! -d "$transAudioCacheDir" ]] && mkdir "$transAudioCacheDir"
            speak_args="${speak_args} -download-audio-as ${transAudioCacheDir}/${word}.mpeg"
        fi
    fi

    res="$(trans -e "$primary_translator" -b ${speak_args:+speak_args} "$word")"

    while IFS="" read -r line; do
        if [[ "$line" != "$word" ]]; then
            echo "$line"
            break
        fi
    done <<<"$res"

    if [ "$verbose" = true ]; then set +x; fi
}

function main {

    # if transText does not start with #
    # if [[ $transText != '#'* ]]; then
    if [ $ROFI_RETV = 2 ]; then
        # translate input
        transResult="$(make_translation "$transText")"

        # If the translation result is empty, that might means the translator is not available at this moment.
        # Switch to secondary transltor and do that again
        if [[ -z "$transResult" ]]; then
            primary_translator=$secondary_translator
            transResult="$(make_translation "$transText")"
        fi

        printf "#\t%-40s\t%s\n" "$transText" "$transResult" >>"$transHistory"
    # if transText starts with #
    # i.e. a row is selected
    elif [ $ROFI_RETV = 1 ]; then
        transText="$(echo "$transText" | cut -f2 | trim)"

        if [ "$speak" = true ]; then
            if [[ -f "$transAudioCacheDir/$transText.mpeg" ]]; then
                # play cached audio file and call it a day
                mpg123 "$transAudioCacheDir/$transText.mpeg" >/dev/null 2>&1 &
                usleep 100000
            else
                # speak it again
                make_translation "$transText"
            fi
        fi

        # update history. let the target entry move to top.
        pattern="$(echo "$transText_org" | sed -e 's/[]\/$*.^[]/\\&/g')" # Put backslash in any character of []/$*.^
        historyContent="$(cat "$transHistory")"
        echo "$historyContent" | sed "/^${pattern}$/d" >"$transHistory"
        echo "$transText_org" >>"$transHistory"
    fi

    # Auto refresh content of each script mode
    if [ "$auto_refresh" = true ]; then
        refresh
    fi

    tac "$transHistory"
}

main
